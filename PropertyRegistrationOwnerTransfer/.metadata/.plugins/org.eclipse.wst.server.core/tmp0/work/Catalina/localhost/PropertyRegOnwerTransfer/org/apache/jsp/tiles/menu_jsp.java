/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2022-07-15 04:20:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.tiles;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.database.ConnectionManager;
import com.model.UserModel;

public final class menu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.model.UserModel");
    _jspx_imports_classes.add("com.database.ConnectionManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"http://www.jacklmoore.com/colorbox/example1/colorbox.css\" />\r\n");
      out.write("<div class=\"sidebar\">\r\n");
      out.write("\t<div class=\"scrollbar-inner sidebar-wrapper\">\r\n");
      out.write("\t\t<div class=\"user\">\r\n");
      out.write("\t\t\t<div class=\"photo\">\r\n");
      out.write("\t\t\t\t<img\r\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/theme/assets/img/profile.png\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"info\">\r\n");
      out.write("\t\t\t\t<a class=\"\"> <span> ");

 	UserModel um = (UserModel) session.getAttribute("USER_MODEL");
 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<span class=\"user-level\">");
      out.print(um.getFname());
      out.write("</span> ");
      out.print(um.getEmailid());
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t<div class=\"clearfix\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
if(um.getRole().equalsIgnoreCase("1")){ 
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<ul class=\"nav\">\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/dashboard.jsp\"> <i\r\n");
      out.write("\t\t\t\t\tclass=\"la la-newspaper-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Verified Properties</p> <span class=\"badge badge-count\">");
      out.print(ConnectionManager.getUploadedDocumentCount(um.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/propertyverification.jsp\"> <i class=\"la la-check-square\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Property Verification Requests</p>\r\n");
      out.write("\t\t\t\t\t <span class=\"badge badge-count\">");
      out.print(ConnectionManager.getPendingDocList().size());
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/propertytransferverif.jsp\"> <i class=\"la la-clone\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Property Transfer Requests</p>\r\n");
      out.write("\t\t\t\t\t<span class=\"badge badge-count\">");
      out.print(ConnectionManager.getTransfReqList().size());
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/tranferRecords.jsp\"> <i class=\"la la-clone\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Transfer Records</p>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<ul class=\"nav\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<li class=\"nav-item update-pro\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<a type=\"button\" style=\"background-color: #1d62f0; color:#ffff\" href=\"");
      out.print(request.getContextPath());
      out.write("/pages/addproperty.jsp\">\r\n");
      out.write("\t\t\t\t\t<i class=\"la la-cloud-upload\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Add Property</p>\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/draftdocument.jsp\"> <i\r\n");
      out.write("\t\t\t\t\tclass=\"la la-keyboard-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Recently Added</p> <span class=\"badge badge-count\">");
      out.print(ConnectionManager.getWitoutSignDocumentListCount(um
					.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/transferofowner.jsp\"> <i class=\"la la-newspaper-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Transfer of Ownership</p>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/dashboard.jsp\"> <i\r\n");
      out.write("\t\t\t\t\tclass=\"la la-newspaper-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Verified Properties</p> <span class=\"badge badge-count\">");
      out.print(ConnectionManager.getUploadedDocumentCount(um.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/pendingTransfer.jsp\"> <i\r\n");
      out.write("\t\t\t\t\tclass=\"la la-newspaper-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Pending Status</p> <span class=\"badge badge-count\">");
      out.print(ConnectionManager.getUploadedDocumentCount(um.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/buyProperty.jsp\"> <i\r\n");
      out.write("\t\t\t\t\tclass=\"la la-newspaper-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Buy Properties</p> <span class=\"badge badge-count\">");
      out.print(ConnectionManager.getCountPropertiesAvailableForBuy(um.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<li class=\"nav-item\"><a\r\n");
      out.write("\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/pages/propertyRequests.jsp\"> <i\r\n");
      out.write("\t\t\t\t\tclass=\"la la-newspaper-o\"></i>\r\n");
      out.write("\t\t\t\t\t<p>Property Requests</p> \r\n");
      out.write("\t\t\t\t\t<span class=\"badge badge-count\">");
      out.print(ConnectionManager.getCountIncomingPropRequests(um.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t<span class=\"badge badge-count\">");
      out.print(ConnectionManager.getCountAcceptedRequest(um.getUid()));
      out.write("</span>\r\n");
      out.write("\t\t\t</a></li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<!-- \t\t\t\t\t\t</a> -->\r\n");
      out.write("<!-- \t\t\t<li class=\"nav-item\"><a -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t\t\t\t<i class=\"la la-dashboard\"></i> -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t\t</a></li> -->\r\n");
      out.write("<!-- \t\t\t<li class=\"nav-item\"><a -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t\t\t\tclass=\"la la-table\"></i> -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t\t</a></li> -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"http://www.jacklmoore.com/colorbox/jquery.colorbox.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t/* function openColorBox(){\r\n");
      out.write("\t   $.colorbox({iframe:true, width:\"50%\", height:\"100%\", href: \"http://localhost:7080/SecurePrivateCloudNew/pages/dashboard.jsp\"});\r\n");
      out.write("\t }\r\n");
      out.write("\t \r\n");
      out.write("\t setTimeout(openColorBox, 1000);\r\n");
      out.write("\t */\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
