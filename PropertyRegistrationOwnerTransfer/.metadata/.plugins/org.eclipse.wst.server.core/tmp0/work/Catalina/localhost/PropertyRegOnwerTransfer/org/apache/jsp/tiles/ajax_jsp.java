/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2022-07-21 05:55:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.tiles;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.model.VerifyRequestModel;
import javax.imageio.ImageIO;
import com.algo.RSA;
import java.io.FileOutputStream;
import java.io.OutputStream;
import com.model.ShareRequestOneMailDocModel;
import com.model.ShareRequestDocModel;
import com.constant.ServerConstants;
import com.helper.TestFileDemo;
import com.pdf.Randomkey;
import java.io.BufferedOutputStream;
import java.security.Key;
import com.algo.AES;
import com.model.DocumentModel;
import java.util.List;
import java.io.File;
import org.apache.commons.fileupload.FileItem;
import com.helper.HttpHelper;
import com.model.UserModel;
import com.database.ConnectionManager;
import com.helper.StringHelper;
import java.util.HashMap;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.OutputStream");
    _jspx_imports_classes.add("com.model.DocumentModel");
    _jspx_imports_classes.add("com.algo.RSA");
    _jspx_imports_classes.add("com.helper.TestFileDemo");
    _jspx_imports_classes.add("com.helper.HttpHelper");
    _jspx_imports_classes.add("com.model.ShareRequestOneMailDocModel");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("java.io.FileOutputStream");
    _jspx_imports_classes.add("com.model.UserModel");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.model.ShareRequestDocModel");
    _jspx_imports_classes.add("com.pdf.Randomkey");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.io.BufferedOutputStream");
    _jspx_imports_classes.add("java.security.Key");
    _jspx_imports_classes.add("com.model.VerifyRequestModel");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.helper.StringHelper");
    _jspx_imports_classes.add("com.algo.AES");
    _jspx_imports_classes.add("javax.imageio.ImageIO");
    _jspx_imports_classes.add("com.database.ConnectionManager");
    _jspx_imports_classes.add("com.constant.ServerConstants");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	String sMethod = StringHelper.n2s(request.getParameter("methodId"));
	String returnString = "";
	System.out.println("HIIIII");
	boolean bypasswrite = false;

	HashMap parameters = StringHelper.displayRequest(request);
	System.out.println("parameters: " + parameters);

	
	
	
	
	if (sMethod.equalsIgnoreCase("registerNewUser")) {
		HashMap uploadMap=HttpHelper.parseMultipartRequest(request);
		uploadMap.putAll(parameters);
		System.out.println("uploadMapuploadMap: " + uploadMap);
		
		
		FileItem fi=(FileItem)uploadMap.get("fileITEM");
// 		fi.write(new File("E:/test/a.pdf"));
		System.out.println("uploadmap: " + uploadMap);
		System.out.println("filenaem: " + fi.getName());
		
// 		String message = ConnectionManager.uploadPropertyNew(fi,um.getUid(),um.getRole(),um.getEmailid(), key, propid, uploadMap.get("surveyno").toString(), uploadMap.get("proptype").toString(), uploadMap.get("proparea").toString(), uploadMap.get("addr").toString(), uploadMap.get("preownername").toString(), uploadMap.get("preowneraddr").toString());


		returnString = ConnectionManager.insertUser(fi, uploadMap);
		response.sendRedirect(request.getContextPath()+"/pages/login.jsp");
		
		
	}else if (sMethod.equalsIgnoreCase("deleteUser")) {
		String id= request.getParameter("uid");
		returnString = ConnectionManager.deleteuser(id);
	}  else if (sMethod.equalsIgnoreCase("requestsign")) {
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
		String id= um.getUid();
		parameters.put("uid", id);
		returnString = ConnectionManager.requestDocumentSign(parameters,um);
	}  else if (sMethod.equalsIgnoreCase("sendotponmobile")) {
		
		String otp=  ConnectionManager.sendOTPOnmobilNo(parameters);
		session.setAttribute("tempOTP",otp);
		returnString ="1";
	}  else if (sMethod.equalsIgnoreCase("rejectFile")) {
		
		returnString =  ConnectionManager.rejectProperty(parameters);
	}
	else if (sMethod.equalsIgnoreCase("verifyotponmobile")) {
		String enterotp = StringHelper.n2s(parameters.get("otpdata"));
		String sid = StringHelper.n2s(parameters.get("ssid"));
		
		
		
// 		String otp = StringHelper.n2s(session.getAttribute("tempOTP"));
		List <ShareRequestOneMailDocModel> list = ConnectionManager.getEmailSharebleFidOnSid(sid);
		ShareRequestOneMailDocModel sm=(ShareRequestOneMailDocModel)list.get(0);
		String otp=sm.getOtp();
		if (enterotp.equals(otp)) {
	
	
	byte[] encdata = TestFileDemo.readFileDataInByte(ServerConstants.FILE_UPLOAD_PATH
					+ "/" + sm.getFilename());

	AES a = new AES();

	String keystr = sm.getAeskey();
	Key key = a.generateKey(keystr);
	byte[] dec1 = a.decryptUsingKey(encdata, key);
	//	 		session.setAttribute("OTP",otp);
	
	
	ConnectionManager.writeBytes(sm.getFilename(), dec1, response,false);
	
	/*
	response.setContentType("application/pdf");
	BufferedOutputStream output = new BufferedOutputStream(
			response.getOutputStream());

	for (int i = 0; i < dec1.length; i++) {
		output.write(dec1[i]);
	}
	output.close();
	response.getOutputStream().flush();
	response.getOutputStream().close();
	*/
	returnString="1" ;
		}
		else{
	returnString="0";
		}
	}
	else if (sMethod.equalsIgnoreCase("download")) {
		
		String sid = StringHelper.n2s(parameters.get("ssid"));
		List <ShareRequestOneMailDocModel> list = ConnectionManager.getEmailSharebleFidOnSid(sid);
		ShareRequestOneMailDocModel sm=(ShareRequestOneMailDocModel)list.get(0);
		
	
	byte[] encdata = TestFileDemo.readFileDataInByte(ServerConstants.FILE_UPLOAD_PATH
					+ "/" + sm.getFilename());

	AES a = new AES();

	String keystr = sm.getAeskey();
	Key key = a.generateKey(keystr);
	byte[] dec1 = a.decryptUsingKey(encdata, key);
	//	 		session.setAttribute("OTP",otp);

		ConnectionManager.writeBytes(sm.getFilename(), dec1, response,true);
	
	return;
		}
	
// 	else if (sMethod.equalsIgnoreCase("uploadFile")) { 
// 		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
// 		HashMap uploadMap=HttpHelper.parseMultipartRequest(request);
// 		uploadMap.putAll(parameters);
// 		if(session.getAttribute("USER_MODEL")==null){
// 			 request.getRequestDispatcher("../pages/login.jsp").forward(request, response);
// 		}
		
		
// 		FileItem fi=(FileItem)uploadMap.get("fileITEM");
// // 		fi.write(new File("E:/test/a.pdf"));
// 		System.out.println(uploadMap);
// 		System.out.println("usermodel values:"+fi);
// 		System.out.println(um.getUid()+":"+um.getEmailid()+":"+um.getRole()+":"+um.getSecretkey());
// 		String message=ConnectionManager.uploadDocument(fi,um.getUid(),um.getRole(),um.getEmailid(), um.getSecretkey());

// 		request.getRequestDispatcher("../pages/dashboard.jsp").forward(request, response);
// 	}
	else if (sMethod.equalsIgnoreCase("deleteFile")) {
		String did=StringHelper.n2s(parameters.get("did"));
		 ConnectionManager.deleteFile(did);
		 request.getRequestDispatcher("../pages/dashboard.jsp").forward(request, response);
	}
	else if (sMethod.equalsIgnoreCase("requestShare")) {
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
		String id= um.getUid();
		parameters.put("uid", id);
		parameters.put("user_email", um.getEmailid());
		returnString = ConnectionManager.updateRequestShare(parameters);
	}      
	else if (sMethod.equalsIgnoreCase("requestShareOnEmail")) {
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
		String id= um.getUid();
		parameters.put("uid", id);
		
		
		returnString = ConnectionManager.updateRequestShareOnEmail(parameters);
	}    
	else if (sMethod.equalsIgnoreCase("getUserDetailsFromAdhar")) {
		System.out.println("in here in ajax");
		returnString = ConnectionManager.getUserDetailsFromAdhar(parameters);
		System.out.println("out of ajax");
	}  else if (sMethod.equalsIgnoreCase("showPicture")) {
		String adhar=StringHelper.n2s(parameters.get("adhar"));
		System.out.println("adharid:: " + adhar);
		System.out.println("path:: " + ServerConstants.LOCAL_UPLOAD+"\\"+adhar+".png");
		ImageIO.write(ImageIO.read(new File(ServerConstants.LOCAL_UPLOAD+"\\"+adhar+".png")), "PNG", response.getOutputStream());
		System.out.println("out of ajax");
	}    
	
	
	
	else if (sMethod.equalsIgnoreCase("uploadFile")) {
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
		HashMap uploadMap=HttpHelper.parseMultipartRequest(request);
		uploadMap.putAll(parameters);
		System.out.println("uploadMapuploadMap: " + uploadMap);
		if(session.getAttribute("USER_MODEL")==null){
	 request.getRequestDispatcher("../pages/login.jsp").forward(request, response);
		}
		
		
		FileItem fi=(FileItem)uploadMap.get("fileITEM");
// 		fi.write(new File("E:/test/a.pdf"));
		System.out.println("uploadmap: " + uploadMap);
		
		String key=Randomkey.randomString(16);
		
		System.out.println("usermodel values:"+fi);
		System.out.println(um.getUid()+":"+um.getEmailid()+":"+um.getRole()+":"+key);
		String propid = (String) uploadMap.get("propid");
		System.out.println("propid is " + propid);
		String message = ConnectionManager.uploadPropertyNew(fi,um.getUid(),um.getRole(),um.getEmailid(), key, propid, uploadMap.get("surveyno").toString(), uploadMap.get("proptype").toString(), uploadMap.get("proparea").toString(), uploadMap.get("addr").toString(), uploadMap.get("preownername").toString(), uploadMap.get("preowneraddr").toString());
		
		response.sendRedirect(request.getContextPath()+"/pages/draftdocument.jsp");
		
	} 
	else if (sMethod.equalsIgnoreCase("addTransferReq")) {
		System.out.println("in here in addTransferReq");
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
// 		HashMap uploadMap=HttpHelper.parseMultipartRequest(request);
// 		uploadMap.putAll(parameters);
		if(session.getAttribute("USER_MODEL")==null){
	 request.getRequestDispatcher("../pages/login.jsp").forward(request, response);
		}
		
		
		System.out.println("uploadmap: " + parameters);
		
		System.out.println("details::: " + um.getUid() + ", survey: " + parameters.get("propid").toString());
		String did = ConnectionManager.checkPropertyAvailable(um.getUid(), parameters.get("propid").toString());
		if(did.equalsIgnoreCase("-1")){
		
			System.out.println("property not available");
			returnString = "Property not found for this property id";
			System.out.println("details::: " + um.getUid() + ", survey: " + parameters.get("propid").toString());
		}else{
			System.out.println("property available for did: " + did);
			System.out.println(um.getUid()+":"+um.getEmailid()+":"+um.getRole());
			String propid = (String) parameters.get("propid");
			System.out.println("propid is " + propid);
			String message = ConnectionManager.addTransferRequest(um.getUid(),um.getRole(),um.getEmailid(), did, propid, parameters);
// 			String message = ConnectionManager.addTransferRequest(um.getUid(),um.getRole(),um.getEmailid(), did, propid, parameters.get("dateofreg").toString(),
// 					parameters.get("surveyno").toString(), parameters.get("newownername").toString(), parameters.get("newownermob").toString(), parameters.get("newowneradhar").toString(),
// 					parameters.get("newowneremail").toString(), parameters.get("propaddrs").toString(), parameters.get("marketval").toString(), parameters.get("sellval").toString(),
// 					parameters.get("stampduty").toString(), parameters.get("regfee").toString(), parameters.get("totalcost").toString());
			returnString = message;
			
		}  
				
	}
	else if (sMethod.equalsIgnoreCase("getPropDetailsFromPropId")) {
		System.out.println("in here in getPropDetailsFromPropId");
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
		
		System.out.println("uploadmap: " + parameters);
		
			System.out.println(um.getUid()+":"+um.getEmailid()+":"+um.getRole());
			String propid = (String) parameters.get("propid");
			System.out.println("propid is " + propid);
			String message = ConnectionManager.getPropDetailsFromPropId(parameters);
			returnString = message;
				
	}
	else if (sMethod.equalsIgnoreCase("signFile")) { 
		UserModel um=(UserModel)session.getAttribute("USER_MODEL");
		HashMap uploadMap=HttpHelper.parseMultipartRequest(request);
		uploadMap.putAll(parameters);
		if(session.getAttribute("USER_MODEL")==null){
	 request.getRequestDispatcher("../pages/login.jsp").forward(request, response);
		}
		
		
		FileItem fi=(FileItem)uploadMap.get("fileITEM");
// 		fi.write(new File("E:/test/a.pdf"));
		System.out.println(uploadMap);
		System.out.println("usermodel values:"+fi);
		System.out.println(um.getUid()+":"+um.getEmailid()+":"+um.getRole()+":"+um.getPublickey());
		String message=ConnectionManager.signDocument(fi,um.getUid(),uploadMap.get("signdocid").toString(),uploadMap.get("password").toString(), um.getFname());
		request.getRequestDispatcher("../pages/dashboard.jsp").forward(request, response);
	}
	else if (sMethod.equalsIgnoreCase("viewShareFile")) {
		String sid=StringHelper.n2s(request.getParameter("sid"));
		System.out.println("sid: " + sid);
		ShareRequestDocModel sm=ConnectionManager.getRecivedFileDataFromSid(sid);
		System.out.println("shreREqModel: " + sm);
		
		ConnectionManager.viewSharedDataFile(sm,response);
		
		
	}
	else if (sMethod.equalsIgnoreCase("viewShareFile2")) {
		String sid=StringHelper.n2s(request.getParameter("sid"));
		System.out.println("sid: " + sid);
		VerifyRequestModel dm=ConnectionManager.getRecivedFileDataFromSid2(sid);
		System.out.println("shreREqModel: " + dm);
		
		ConnectionManager.viewSharedDataFile2(dm,response);
		
		
	}
	else if (sMethod.equalsIgnoreCase("activeemail")) {
		String email = request.getParameter("email");
		returnString = ConnectionManager.activeEmail(email); 

	}
	else if (sMethod.equalsIgnoreCase("checkPropAvail")) {
		String propid = request.getParameter("propid");
		System.out.println("propid for check: " + propid);
		returnString = ConnectionManager.checkPropAvail(propid); 
		System.out.println("propid for reutn: " + returnString);
	}
	else if (sMethod.equalsIgnoreCase("fPasswd")) {
		String password = request.getParameter("rpassword");
		String otp1= request.getParameter("otp");
		String otp=(String)session.getAttribute("OTP");
		System.out.println(otp1+" : "+otp);
		if(otp.equalsIgnoreCase(otp1)){
				returnString = ConnectionManager.fPasswd(parameters).trim();
				System.err.println("*** Okay");
		}
		else{
	returnString="error".trim();	
		}
	}
	else if (sMethod.equalsIgnoreCase("updateUser")) {
		returnString = ConnectionManager.updateUser(parameters);
	}
	else if (sMethod.equalsIgnoreCase("updatecharges")) {
		
		returnString = ConnectionManager.insertHospitalCharges(parameters);
	}
else if (sMethod.equalsIgnoreCase("updatepaycharges")) {
	
		returnString = ConnectionManager.updatepaycharges(parameters);
	}
else if (sMethod.equalsIgnoreCase("checkotp")) {
	UserModel um =	(UserModel)session.getAttribute("USER_MODEL");
	String otp=StringHelper.n2s(um.getOtp());
	String votp=StringHelper.n2s(request.getParameter("otp"));
	if(otp.equalsIgnoreCase(votp)){
		returnString="1";
	}else{
		returnString="0";
	}
}
	else if (sMethod.equalsIgnoreCase("activemobile")) {
		String mobile = request.getParameter("mobile");

		returnString = ConnectionManager.activeMobile(mobile);

	}
	


	else if (sMethod.equalsIgnoreCase("transferOfProperty")) {
		String rid=request.getParameter("rid");
		returnString = ConnectionManager.transferOfProperty(rid); 
	}
	else if (sMethod.equalsIgnoreCase("fnRequestToView")) {
		String did=request.getParameter("did");
		String uid=request.getParameter("uid");
		returnString = ConnectionManager.requestPropDetails(did,uid); 
	}

/* 	else if (sMethod.equalsIgnoreCase("sendOTP")) {
		String username1=request.getParameter("username1");
		String otp = ConnectionManager.sendOTPToMailAndMobile(username1);
		session.setAttribute("OTP",otp);
	} */
	
	else if (sMethod.equalsIgnoreCase("viewFile")) {
		UserModel um =	(UserModel)session.getAttribute("USER_MODEL");
		ConnectionManager.downloadFile(parameters, um, response,false);
 return;
	}
	
	else if (sMethod.equalsIgnoreCase("viewFile2")) {
		UserModel um =	(UserModel)session.getAttribute("USER_MODEL");
		ConnectionManager.downloadFile2(parameters, um, response,false);
 return;
	}
	else if (sMethod.equalsIgnoreCase("viewSharedFile")) {
		UserModel um =	(UserModel)session.getAttribute("USER_MODEL");
		ConnectionManager.downloadFile(parameters, um, response,false);
 return;
	}
	else if (sMethod.equalsIgnoreCase("viewTransferFile")) {
		UserModel um =	(UserModel)session.getAttribute("USER_MODEL");
		ConnectionManager.viewTransferFile(parameters, um, response,false);
 		return;
	}
	else if (sMethod.equalsIgnoreCase("changeSaleStat")) {
		String stat = request.getParameter("stat");
		String did = request.getParameter("did");
		System.out.println("ajax: " + stat + ", " + did);
		returnString = ConnectionManager.changeSaleStaus(stat,did);
	}
	else if (sMethod.equalsIgnoreCase("changeRequestStat")) {
		String stat = request.getParameter("stat");
		String reqid = request.getParameter("reqid");
		System.out.println("ajax: " + stat + ", " + reqid);
		returnString = ConnectionManager.changeRequestStaus(stat,reqid);
	}
	else if (sMethod.equalsIgnoreCase("checkLogin")) {
	UserModel um = ConnectionManager.checkLogin(parameters);
		if (um != null) {
		//UserModel um1 = ConnectionManager.checkLogin(parameters);
		//int random = (int )(Math.random() * 999 + 100);
		//ConnectionManager.sendOTPToMobile(um1.getMobile(),random+"");
// 				ConnectionManager.sendOTPToEmail(um1.getEmailid(),random+"");
// 				String OTP=random+"-"+nextrandom;
		//System.out.println("OTP :"+random);
		//um1.setOtp(random+"");
			session.setAttribute("USER_MODEL", um);
			returnString = "1";
		}else{
			returnString = "0";
		}

	}

	else if (sMethod.equalsIgnoreCase("logout")) {
		session.removeAttribute("USER_MODEL");
		bypasswrite = true;

      out.write("<script>\r\n");
      out.write("\t\t\twindow.location.href='");
      out.print(request.getContextPath());
      out.write("/pages/login.jsp';\r\n");
      out.write("</script>\r\n");

	}
	if (!bypasswrite) {
		out.println(returnString);
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
